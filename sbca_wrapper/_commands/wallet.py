from sbca_wrapper._command import libindy_command
from typing import Optional, Union


class Wallet:
    """A class holding all indy wallet functions.

    This class holds all functions that are required to create, manage and
    access indy wallets.
    """

    @staticmethod
    @libindy_command('indy_create_wallet')
    async def create_wallet(wallet_config: Union[dict, str], wallet_credentials: Union[dict, str]):
        """Creates a new indy wallet.

        Creates a new indy wallet along the specifications of the wallet config.
        By default, it will be saved in the form of a database file on the file
        system, but custom wallet storage types can override this behavior.

        :param wallet_config: The configuration values of the wallet in the form
            of a dict or a stringified JSON object.

            Keys:
                id: A string representing the identifier of the wallet. It has
                    to be unique inside a wallet storage.
                storage_type: An optional string to set a non-default wallet
                    storage type. It has to be the name of a storage type that
                    was registered earlier. The default wallet storage type is
                    "default", which will store the wallets as a database file
                    on the local file system.

                    NOTE: This version of the SBCA-Indy-Wrapper does not support
                        wallet storage registration!
                storage_config: An optional JSON object that contains
                    configuration values for the wallet storage type specified
                    above. The supported keys are defined by the storage type.

                    For storage types that support the "default" configuration:
                        path: An optional string that defines the directory
                            where the wallet will be saved in. The default value
                            is "<$HOME>/.indy_client/wallet".
        :param wallet_credentials: The credentials for the wallet (and, if
            necessary, the wallet storage) in the form of a dict or stringified
            JSON object.

            Keys:
                key: A key that is used as wallet passphrase. The wallet
                    contents will be derived from that key.
                storage_credentials: Ab optional JSON object that contains
                    credential values for the wallet storage. The supported keys
                    are defined by the storage type.

                    By default, this is empty.
                key_derivation_method: The name of the method that should be
                    used for the wallet key derivation.

                    Supported methods are:
                        ARGON2I_MOD: Default derivation method
                        ARGON2I_INT: Less secure, but faster derivation method
                        RAW: No key derivation
                            RAW keys are generated by the generate_wallet_key()
                            method

        :raises WalletAlreadyExistsError: Raised when a wallet with the given id
            already exists in the specified wallet storage.
        :raises UnknownWalletTypeError: Raised when the specified wallet storage
            type is not registered.
        """
        pass

    @staticmethod
    @libindy_command('indy_delete_wallet')
    async def delete_wallet(wallet_config: Union[dict, str], wallet_credentials: Union[dict, str]):
        """Delete an existing indy wallet.

        This will permanently remove the wallet and all its contents. If the
        stored data should be preserved, is should be exported by using the
        export_wallet() method first.

        :param wallet_config: -> See create_wallet()
        :param wallet_credentials: -> See create_wallet()

        :raises WalletNotFoundError: Raised when no wallet with the given id has
            been found in the specified wallet storage.
        :raises CommonInvalidStateError: Raised when trying to delete a wallet
            that is currently open.
        :raises
        """
        pass

    @staticmethod
    @libindy_command('indy_open_wallet')
    async def open_wallet(wallet_config: Union[dict, str], wallet_credentials: Union[dict, str]) -> int:
        """
        Open an existing indy wallet.
        ----------------------------------------------------------------------------------------------------------------
        :param wallet_config: str, dict - Wallet and wallet configuration JSON
            {
                id: str - Identifier of the wallet to open
                storage_type: str <optional, default: "default"> - Wallet storage type name
                    -> Register wallet storage types using register_wallet_storage
                storage_config: dict <optional> - Storage configuration JSON
                    -> Keys are defined by the wallet storage type
                    -> DEFAULT: {
                        path: str <optional> - Path where wallets of storage type are saved.
                            -> By default, it points to $HOME/.indy_client/wallet
                    }
            }
        :param wallet_credentials: str, dict - Wallet credential and wallet storage credential JSON
            {
                key: str - Password to open wallet and to derive keys from
                rekey: str <optional> - New password for the wallet (will replace key)
                storage_credentials: dict <optional> - Credential values required by wallet storage type
                    -> For default storage type, leave empty
                key_derivation_method: str <optional, default: "ARGON2I_MOD"> - Key derivation algorithm name
                    Supported:
                     -  ARGON2I_MOD: Default method
                     -  ARGON2I_INT: Less secure, but faster
                     -  RAW: No derivation, raw key is used (generate key using generate_raw_key)
                rekey_derivation_method: str <optional, default: "ARGON2I_MOD"> Derivation method for rekey
            }
        :returns wallet_handle: int - Handle to the wallet that is used in calls to access the wallet's contents
        """
        pass

    @staticmethod
    @libindy_command('indy_close_wallet')
    async def close_wallet(wallet_handle: int):
        """
        Close an open wallet.

        :param wallet_handle: int - Handle of the currently open wallet
        """
        pass

    @staticmethod
    @libindy_command('indy_import_wallet')
    async def import_wallet(wallet_config: Union[dict, str], wallet_credentials: Union[dict, str],
                            import_config: Union[dict, str]):
        """
        Create a new secure indy wallet and import contents that were previously exported from another indy wallet.

        :param wallet_config: str, dict - Wallet and wallet configuration JSON
            {
                id: str - Identifier that will also be used as the wallet's (file) name
                storage_type: str <optional, default: "default"> - Wallet storage type name
                    -> Register wallet storage types using register_wallet_storage
                storage_config: dict <optional> - Storage configuration JSON
                    -> Keys are defined by the wallet storage type
                    -> DEFAULT: {
                        path: str <optional> - Path where wallets of storage type are saved.
                            -> By default, it points to $HOME/.indy_client/wallet
                    }
            }
        :param wallet_credentials: str, dict - Wallet credential and wallet storage credential JSON
            {
                key: str - Password to open wallet and to derive keys from
                storage_credentials: dict <optional> - Credential values required by wallet storage type
                    -> For default storage type, leave empty
                key_derivation_method: str <optional, default: "ARGON2I_MOD"> - Key derivation algorithm name
                    Supported:
                     -  ARGON2I_MOD: Default method
                     -  ARGON2I_INT: Less secure, but faster
                     -  RAW: No derivation, raw key is used (generate key using generate_raw_key)
            }
        :param import_config: str, dict - Data import configuration
            {
                path: str - Path to the file holding exported wallet data
                key: str - Key used to export wallet data
            }
        """
        pass

    @staticmethod
    @libindy_command('indy_export_wallet')
    async def export_wallet(wallet_handle: int, export_config: Union[dict, str]):
        """
        Export the data of a wallet into a file.

        :param wallet_handle: int - Handle of the open wallet to export data from
        :param export_config: str, dict - Data export configuration
            {
                path: str - Path to create export data file at
                key: str - Passphrase to derive wallet export key from
                key_derivation_method: str <optional, default: "ARGON2I_MOD"> - Key derivation algorithm name
                    Supported:
                     -  ARGON2I_MOD: Default method
                     -  ARGON2I_INT: Less secure, but faster
                     -  RAW: No derivation, raw key is used (generate key using generate_raw_key)
            }
        """
        pass

    @staticmethod
    @libindy_command('indy_generate_wallet_key')
    async def generate_raw_key(generator_config: Optional[Union[dict, str]]) -> str:
        """
        Generate a wallet master key using the "RAW" derivation method.
        # TODO: Why master key?

        :param generator_config: str, dict <optional> - Config for key generation
            {
                seed: str <optional> - Seed for specific key generation (UTF-8, BASE64 or HEX string)
            }
        """
        pass
